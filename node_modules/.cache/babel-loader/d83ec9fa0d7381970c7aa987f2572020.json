{"ast":null,"code":"import _slicedToArray from \"/Users/ednardo/pdf-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ednardo/pdf-viewer/src/components/pdf/single-page.js\";\nimport React, { useMemo, useState } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nexport default function SinglePage(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      numPages = _useState2[0],\n      setNumPages = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pageNumber = _useState4[0],\n      setPageNumber = _useState4[1]; //setting 1 to show fisrt page\n\n\n  function onDocumentLoadSuccess(_ref) {\n    var numPages = _ref.numPages;\n    setNumPages(numPages);\n    setPageNumber(1);\n  }\n\n  function changePage(offset) {\n    setPageNumber(function (prevPageNumber) {\n      return prevPageNumber + offset;\n    });\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n\n  function highlight_words(word) {\n    // retrives all childNodes of body\n    var childNodes = document.body.childNodes; // start replacing\n\n    replaceInNodes(childNodes, \"search\", \"replace\");\n\n    function replaceInNodes(nodes, search, replace) {\n      // iterate through all nodes\n      for (var i = 0; i < nodes.length; i++) {\n        var curNode = nodes[i]; // if the node has attributes, let us look at those\n        // i.e. we want to change \"John\" in the input placeholder to \"Peter\" - <input type=\"text\" value=\"John\">\n\n        if (curNode.attributes !== undefined) {\n          var curNodeAttributes = curNode.attributes;\n\n          for (var ii = 0; ii < curNodeAttributes.length; ii++) {\n            // replace attribute values\n            curNodeAttributes[ii].nodeValue = curNodeAttributes[ii].nodeValue.replace(search, replace);\n          }\n        } // It is a \"TEXT_NODE\"\n        // i.E. <span>John</span>\n\n\n        if (curNode.nodeType === Node.TEXT_NODE) {\n          curNode.data = this.injectIntoString(curNode.data);\n        } // It is a \"ELEMENT_NODE\", meaning we need to go deeper\n\n\n        if (curNode.nodeType === Node.ELEMENT_NODE) {\n          this.replaceInNodes(curNode.childNodes);\n        }\n      }\n    }\n  }\n\n  var pdf = props.pdf;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Document, {\n    file: pdf,\n    options: {\n      workerSrc: \"/pdf.worker.js\"\n    },\n    onLoadSuccess: onDocumentLoadSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    pageNumber: pageNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Page \", pageNumber || (numPages ? 1 : \"--\"), \" of \", numPages || \"--\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pageNumber <= 1,\n    onClick: previousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pageNumber >= numPages,\n    onClick: nextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Next\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return highlight_words('Nulla');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Highlight\")));\n}","map":{"version":3,"sources":["/Users/ednardo/pdf-viewer/src/components/pdf/single-page.js"],"names":["React","useMemo","useState","Document","Page","SinglePage","props","numPages","setNumPages","pageNumber","setPageNumber","onDocumentLoadSuccess","changePage","offset","prevPageNumber","previousPage","nextPage","highlight_words","word","childNodes","document","body","replaceInNodes","nodes","search","replace","i","length","curNode","attributes","undefined","curNodeAttributes","ii","nodeValue","nodeType","Node","TEXT_NODE","data","injectIntoString","ELEMENT_NODE","pdf","workerSrc"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { Document, Page } from \"react-pdf\";\r\n\r\nexport default function SinglePage(props) {\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber, setPageNumber] = useState(1); //setting 1 to show fisrt page\r\n\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n    setPageNumber(1);\r\n  }\r\n\r\n  function changePage(offset) {\r\n    setPageNumber(prevPageNumber => prevPageNumber + offset);\r\n  }\r\n\r\n  function previousPage() {\r\n    changePage(-1);\r\n  }\r\n\r\n  function nextPage() {\r\n    changePage(1);\r\n  }\r\n\r\n  function highlight_words(word) {\r\n    // retrives all childNodes of body\r\nvar childNodes = document.body.childNodes;\r\n\r\n// start replacing\r\nreplaceInNodes(childNodes, \"search\", \"replace\");\r\n\r\nfunction replaceInNodes(nodes,search,replace) {\r\n    // iterate through all nodes\r\n    for (var i = 0; i < nodes.length; i++) { \r\n        var curNode = nodes[i];\r\n        // if the node has attributes, let us look at those\r\n        // i.e. we want to change \"John\" in the input placeholder to \"Peter\" - <input type=\"text\" value=\"John\">\r\n        if (curNode.attributes !== undefined) {\r\n            var curNodeAttributes = curNode.attributes;\r\n            for (var ii = 0; ii < curNodeAttributes.length; ii++) {\r\n                // replace attribute values\r\n                curNodeAttributes[ii].nodeValue = curNodeAttributes[ii].nodeValue.replace(search, replace);\r\n            }   \r\n        }\r\n        // It is a \"TEXT_NODE\"\r\n        // i.E. <span>John</span>\r\n        if (curNode.nodeType === Node.TEXT_NODE) {\r\n            curNode.data = this.injectIntoString(curNode.data);\r\n        }\r\n        // It is a \"ELEMENT_NODE\", meaning we need to go deeper\r\n        if (curNode.nodeType === Node.ELEMENT_NODE) {\r\n            this.replaceInNodes(curNode.childNodes);\r\n        }\r\n    }\r\n}\r\n}\r\n\r\n  const { pdf } = props;\r\n\r\n  return (\r\n    <>\r\n      <Document\r\n        file={pdf}\r\n        options={{ workerSrc: \"/pdf.worker.js\" }}\r\n        onLoadSuccess={onDocumentLoadSuccess}\r\n      >\r\n        <Page\r\n          pageNumber={pageNumber}\r\n        />\r\n      </Document>\r\n      <div>\r\n        <p>\r\n          Page {pageNumber || (numPages ? 1 : \"--\")} of {numPages || \"--\"}\r\n        </p>\r\n        <button type=\"button\" disabled={pageNumber <= 1} onClick={previousPage}>\r\n          Previous\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled={pageNumber >= numPages}\r\n          onClick={nextPage}\r\n        >\r\n          Next\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => highlight_words('Nulla')}\r\n        >\r\n          Highlight\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}